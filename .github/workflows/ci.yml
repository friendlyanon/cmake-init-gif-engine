name: Continuous Integration

on:
  push:
    branches:
    - develop
    - feature/*

  pull_request:
    branches:
    - develop

  workflow_dispatch: ~

env:
  VCPKG_COMMIT: 4990d2b9510876531eb7e73eeba09210178e804f

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-python@v2
      with: { python-version: "3.8" }

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-11 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  fuzz:
    needs: [lint]

    strategy:
      matrix:
        fuzzer: [parser]

    runs-on: ubuntu-latest

    if: github.repository_owner == 'friendlyanon'

    steps:
    - uses: actions/checkout@v1

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3
      with: { version: "1.10.2" }

    - name: Install rclone
      run: |
        curl https://rclone.org/install.sh | sudo bash
        mkdir -p ~/.config/rclone
        cat << 'EOF' > ~/.config/rclone/rclone.conf
        [corpus]
        type = tardigrade
        access_grant = ${{ secrets.STORJ_ACCESS_GRANT }}
        EOF

    - name: Fetch corpus data from storage
      run: fuzz/corpus-download.sh "${{ matrix.fuzzer }}"

    - name: Configure
      run: cmake -S fuzz -B build -G Ninja -D CMAKE_C_COMPILER=clang-11

    - name: Fuzz
      # Run via script, so we have a tty to echo the build output
      shell: script -qec "bash --noprofile --norc -eo pipefail {0}" /dev/null
      run: "cmake --build build --target ${{ matrix.fuzzer }} \
        | tee /dev/tty \
        | grep -oPe '^Exe: \\K(.+)' \
        | { read -r exe; \"$exe\" -max_len=512 -max_total_time=120 \
        -print_corpus_stats=1 -print_final_stats=1 fuzz/corpus test/assets; }"

    - name: Sync corpus back to storage
      if: always()
      run: fuzz/corpus-upload.sh "${{ matrix.fuzzer }}"

    - name: Make a corpus artifact
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: ${{ matrix.fuzzer }} corpus - ${{ github.sha }}
        path: fuzz/corpus/${{ matrix.fuzzer }}.zip
        if-no-files-found: ignore

  coverage:
    needs: [lint]

    runs-on: ubuntu-latest

    if: github.repository_owner == 'friendlyanon'

    steps:
    - uses: actions/checkout@v1

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Install vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with: { committish: "${{ env.VCPKG_COMMIT }}" }

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v1
      with:
        file: build/coverage/coverage.info

  sanitize:
    needs: [lint]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Install vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with: { committish: "${{ env.VCPKG_COMMIT }}" }

    - name: Configure
      env: { CC: clang-11 }
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure -j 2

  test:
    needs: [lint]

    strategy:
      matrix:
        os: [macos, ubuntu, windows]

        type: [shared, static]

        include:
        - { type: shared, shared: YES }
        - { type: static, shared: NO }
        - os: windows
          # Disable C5105, because the Windows runner uses an old SDK
          env: "{ \
            \"VCPKG_DEFAULT_TRIPLET\": \"x64-windows\", \
            \"EXTRA_C_FLAGS\": \"/wd5105\" }"

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1

    - name: Install static analyzers
      if: matrix.os == 'ubuntu'
      run: sudo apt-get install clang-tidy cppcheck -y -q

    - name: Install vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with: { committish: "${{ env.VCPKG_COMMIT }}" }

    - name: Configure
      env: ${{ fromJson(matrix.env || '{}') }}
      run: cmake --preset=ci-${{ matrix.os }}
        -D BUILD_SHARED_LIBS=${{ matrix.shared }}

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure -C Release -j 2
